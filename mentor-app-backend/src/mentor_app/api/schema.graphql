schema {
    query: Query
    mutation: Mutation
}

type Account {
    account_id: ID!
    mentor_id: ID
    student_id: ID
    first_name: String!
    last_name: String!
    email: String!
}

type MentorProfile {
    mentor_id: ID!
    username: String!
    profile_image: String
    mentor_email: String
    country: String!
    city: String!
    hobbies: String
    statement: String
    quote: String
}

type StudentProfile {
    student_id: ID!
    username: String!
    profile_image: String
    student_email: String
    country: String!
    city: String!
    hobbies: String
    statement: String
}

input NewStudentProfile {
    username: String!
    profile_image: String
    student_email: String
    country: String!
    city: String!
    hobbies: String
    statement: String
    courseId: ID
}

input NewMentorProfile {
    username: String!
    profile_image: String
    mentor_email: String
    country: String!
    city: String!
    hobbies: String
    statement: String
    quote: String
}

type Result {
    result: Boolean
    error: String
}

type StudentAwardResult {
    course_title: String
    mentor_username: String
    date: String
}

type StudentInterestResult {
    course_id: ID
    course_title: String
}

type MentorCoursesResult {
    course_id: ID
    course_title: String
    price: Float
    day: String
    hours: [Int]
}

type Query {
    is_email_in_use(email: String!): Result!

    get_student_awards(student_id: ID!): [StudentAwardResult!]!  # Authenticated
    get_student_interests(student_id: ID!): [StudentInterestResult!]!  # Authenticated
    get_all_courses: [StudentInterestResult!]! # Authenticated

    get_mentor_courses(mentor_id: ID!): [MentorCoursesResult!]! # Authenticated - REDO??

    account_info(account_id: ID!): Account! # Authenticated
    student_info(student_id: ID!): StudentProfile!  # Authenticated?
    mentor_info(mentor_id: ID!): MentorProfile!  # Authenticated?
}

type Mutation {
    register_student(first_name: String!, last_name: String!, email: String!, password: String!, profile: NewStudentProfile!): Result!
    register_mentor(first_name: String!, last_name: String!, email: String!, password: String!, profile: NewMentorProfile!): Result!

    delete_student_interest(student_id: ID!, course_id: ID!): Result!  # Authenticated
    add_student_interest(student_id: ID!, course_id: ID!): Result! #Authenticated

    add_mentor_course(mentor_id: ID!, course_id: ID!, price: Float!, day: Int!, hours: [Int!]!): Result! # Authenticated - REDO???
    delete_mentor_course(mentor_id: ID!, course_id: ID!): Result! # Authenticated

    login(email: String!, password: String!): Result!
    logout: Boolean! # Authenticated
}