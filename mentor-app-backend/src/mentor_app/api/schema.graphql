schema {
    query: Query
    mutation: Mutation
}

type Account {
    account_id: ID!
    mentor_id: ID
    student_id: ID
    first_name: String!
    last_name: String!
    email: String!
}

type MentorProfile {
    mentor_id: ID!
    username: String!
    profile_image: String
    mentor_email: String
    country: String!
    city: String!
    hobbies: String
    statement: String
    quote: String
}

type StudentProfile {
    student_id: ID!
    username: String!
    profile_image: String
    student_email: String
    country: String!
    city: String!
    hobbies: String
    statement: String
}

input NewStudentProfile {
    username: String!
    profile_image: String
    student_email: String
    country: String!
    city: String!
    hobbies: String
    statement: String
    course_id: ID
}

input NewMentorProfile {
    username: String!
    profile_image: String
    mentor_email: String
    country: String!
    city: String!
    hobbies: String
    statement: String
    quote: String
}

type Result {
    result: Boolean
    error: String
}

type StudentAwardResult {
    course_title: String
    mentor_username: String
    date: String
}

type StudentInterestResult {
    course_id: ID
    course_title: String
}

type MentorCoursesResult {
    course_id: ID
    course_title: String
    price: Float
    day: String
    hours: [Int]
}

type MentorReviewResult {
    course_title: String
    review: String
    stars: Int
    student_username: String
    date: String
}

type StudentSettingsResult {
    first_name: String
    last_name: String
    student_username: String
    student_email: String
    country: String
    city: String
    statement: String
    hobbies: String
}

type MentorSettingsResult {
    first_name: String
    last_name: String
    mentor_username: String
    mentor_email: String
    country: String
    city: String
    statement: String
    hobbies: String
    quote: String
}

input StudentSettingsInfo {
    first_name: String!
    last_name: String!
    username: String!
    student_email: String!
    country: String!
    city: String!
    hobbies: String!
    statement: String!
}

input MentorSettingsInfo {
    first_name: String!
    last_name: String!
    username: String!
    mentor_email: String!
    country: String!
    city: String!
    hobbies: String!
    statement: String!
    quote: String!
}

type StudentAllMentorsResult {
    mentor_id: ID!
    course_id: ID!
    username: String!
    course_title: String!
    review: String
}

type MentorAllStudentsResult {
    student_id: ID!
    course_id: ID!
    username: String!
    course_title: String!
    awarded: Boolean
}

type StudentRecommendationsResult {
    mentor_id: ID!
    mentor_profile_image: String!
    mentor_username: String!
    mentor_country: String!
    mentor_city: String!
    course: String!
    course_id: ID!
    price: Float!
}

type AvailableHoursType {
    day: Int!
    hour: Int!
    available_hours_id: ID!
}

type StudentGetCreateAppointmentInfoResult {
    mentor_username: String!
    mentor_email: String!
    course: String!
    course_id: ID!
    price: Float!
    available_hours: [AvailableHoursType!]!
}

type StudentGetAllAppointmentsType {
    appointment_id: ID!
    mentor_username: String!
    mentor_email: String!
    course: String!
    price: Float!
    day: Float!
    hour: Float!
    status: String!
}

type MentorGetAllAppointmentsType {
    appointment_id: ID!
    student_username: String!
    student_email: String!
    course: String!
    price: Float!
    day: Float!
    hour: Float!
    status: String!
}

type MentorCoursesType {
    course_id: ID!
    course_title: String!
    price: Float!
}

type MentorReviewsType {
    review: String!
    course_title: String!
    student_username: String!
}

type MentorDetailsResult {
    mentor_username: String!
    country: String!
    city: String!
    quote: String!
    courses: [MentorCoursesType!]!
    reviews: [MentorReviewsType!]!
}

type CreateProfileResult {
    result: String
    error: String
}

type Query {
    is_email_in_use(email: String!): Result!

    get_student_awards(student_id: ID!): [StudentAwardResult!]!  # Authenticated
    get_student_interests(student_id: ID!): [StudentInterestResult!]  # Authenticated
    get_all_courses: [StudentInterestResult!]!

    get_mentor_reviews(mentor_id: ID!): [MentorReviewResult!]! # Authenticated
    get_mentor_courses(mentor_id: ID!): [MentorCoursesResult!] # Authenticated - REDO??

    get_student_settings_info(account_id: ID!): StudentSettingsResult! # Authenticated
    get_mentor_settings_info(account_id: ID!): MentorSettingsResult! # Authenticated

    get_mentor_all_students(mentor_id: ID!): [MentorAllStudentsResult!]! # Authenticated
    get_student_all_mentors(student_id: ID!): [StudentAllMentorsResult!]! # Authenticated

    get_student_all_recommendations(student_id: ID!): [StudentRecommendationsResult!]! # Authenticated
    get_create_appointment_info(mentor_id: ID!, course_id: ID!): StudentGetCreateAppointmentInfoResult! # Authenticated

    get_student_all_appointments(student_id: ID!): [StudentGetAllAppointmentsType!]! # Authenticated
    get_mentor_all_appointments(mentor_id: ID!): [MentorGetAllAppointmentsType!]! # Authenticated

    get_mentor_details(mentor_id: ID!): MentorDetailsResult! # Authenticated

    account_info: Account! # Authenticated
    student_info(student_id: ID!): StudentProfile!  # Authenticated?
    mentor_info(mentor_id: ID!): MentorProfile!  # Authenticated?
}

type Mutation {
    register_student(first_name: String!, last_name: String!, email: String!, password: String!, profile: NewStudentProfile!): Result!
    register_mentor(first_name: String!, last_name: String!, email: String!, password: String!, profile: NewMentorProfile!): Result!

    delete_student_interest(student_id: ID!, course_id: ID!): Result!  # Authenticated
    add_student_interest(student_id: ID!, course_id: ID!): Result! #Authenticated

    add_mentor_course(mentor_id: ID!, course_id: ID!, price: Float!, day: Int!, hours: [Int!]!): Result! # Authenticated - REDO???
    delete_mentor_course(mentor_id: ID!, course_id: ID!): Result! # Authenticated

    update_student_settings_info(account_id: ID!, settings_info: StudentSettingsInfo!): Result! # Authenticated
    update_mentor_settings_info(account_id: ID!, settings_info: MentorSettingsInfo!): Result! # Authenticated

    create_appointment(student_id: ID!, course_id: ID!, mentor_id: ID!, available_hours_id: ID!): Result! # Authenticated
    cancel_appointment(appointment_id: ID!): Result! # Authenticated
    mentor_accept_appointment(appointment_id: ID!): Result! # Authenticated
    mentor_finish_appointment(appointment_id: ID!): Result! # Authenticated

    student_review_mentor(student_id: ID!, mentor_id: ID!, course_id: ID!, review: String!): Result! # Authenticated
    student_edit_review_mentor(student_id: ID!, mentor_id: ID!, course_id: ID!, review: String!): Result! # Authenticated

    mentor_award_student(student_id: ID!, mentor_id: ID!, course_id: ID!): Result! # Authenticated

    create_student_profile(account_id: ID!, profile: NewStudentProfile!): CreateProfileResult! # Authenticated
    create_mentor_profile(account_id: ID!, profile: NewMentorProfile!): CreateProfileResult! # Authenticated

    login(email: String!, password: String!): Result! # This should give me an account_id IDEALLY
    logout: Result! # Authenticated
}